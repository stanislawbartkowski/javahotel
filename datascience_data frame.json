{"paragraphs":[{"text":"val sqlC = new org.apache.spark.sql.SQLContext(sc)\nimport sqlC.implicits._","user":"sb","dateUpdated":"2018-08-29T23:51:17+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"warning: there was one deprecation warning; re-run with -deprecation for details\nsqlC: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@37049c4d\nimport sqlC.implicits._\n"}]},"apps":[],"jobName":"paragraph_1535376273547_-616672007","id":"20180827-152433_1244162659","dateCreated":"2018-08-27T15:24:33+0200","dateStarted":"2018-08-29T23:51:18+0200","dateFinished":"2018-08-29T23:51:20+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1279"},{"text":"import org.apache.spark.sql._\nimport org.apache.spark.sql.types._\n\ndef createDF(spark: SparkSession, names: Seq[String], series: Seq[Any]*): DataFrame = {\n    require(names.length == series.length)\n    //    val datas : Seq[Seq[Any]] = List.fill(names.length)(Nil)\n    //    val rows : Seq[Row] = List.fill(names.length)(Row())\n    val numof: Int = series(0).length\n    var rows: Seq[Row] = Nil\n    for (i <- 0 until numof) {\n      var da: Seq[Any] = Nil\n      for (j <- 0 until series.length)\n        da = da :+ series(j)(i)\n      val r: Row = Row.fromSeq(da)\n      rows = rows :+ r\n    }\n    val rdd = spark.sparkContext.makeRDD(rows)\n    // schema\n    val schema: Seq[StructField] =\n      for (i <- 0 until names.length)\n        yield StructField(names(i),\n          series(i)(0) match {\n            case t: Int => IntegerType\n            case t: Double => DoubleType\n            case _ => StringType\n          },\n          false\n        )\n    spark.createDataFrame(rdd, StructType(schema))\n  }","user":"sb","dateUpdated":"2018-08-29T23:51:24+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql._\nimport org.apache.spark.sql.types._\ncreateDF: (spark: org.apache.spark.sql.SparkSession, names: Seq[String], series: Seq[Any]*)org.apache.spark.sql.DataFrame\n"}]},"apps":[],"jobName":"paragraph_1535376294977_-338636470","id":"20180827-152454_1621338021","dateCreated":"2018-08-27T15:24:54+0200","dateStarted":"2018-08-29T23:51:24+0200","dateFinished":"2018-08-29T23:51:25+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1280"},{"text":"val names = Seq(\"number\", \"word\")\n    val numbers = Seq(8, 64, -227)\n    val words = Seq(\"bat\", \"mouse\", \"horse\")\n    val da =  createDF(spark, names, numbers, words)\n    da.show(3)","user":"sb","dateUpdated":"2018-08-29T23:51:38+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"names: Seq[String] = List(number, word)\nnumbers: Seq[Int] = List(8, 64, -227)\nwords: Seq[String] = List(bat, mouse, horse)\nda: org.apache.spark.sql.DataFrame = [number: int, word: string]\n+------+-----+\n|number| word|\n+------+-----+\n|     8|  bat|\n|    64|mouse|\n|  -227|horse|\n+------+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1535376306917_-1682179629","id":"20180827-152506_1136720706","dateCreated":"2018-08-27T15:25:06+0200","dateStarted":"2018-08-29T23:51:38+0200","dateFinished":"2018-08-29T23:51:43+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1281"},{"text":"val names1 = Seq(\"countries\",\"gold\",\"silver\",\"bronze\")\n    val countries = Seq(\"Russian Fed.\", \"Norway\", \"Canada\", \"United States\",\n    \"Netherlands\", \"Germany\", \"Switzerland\", \"Belarus\",\n    \"Austria\", \"France\", \"Poland\", \"China\", \"Korea\",\n    \"Sweden\", \"Czech Republic\", \"Slovenia\", \"Japan\",\n    \"Finland\", \"Great Britain\", \"Ukraine\", \"Slovakia\",\n    \"Italy\", \"Latvia\", \"Australia\", \"Croatia\", \"Kazakhstan\")\n\n    val gold = Seq(13, 11, 10, 9, 8, 8, 6, 5, 4, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0)\n    val silver = Seq(11, 5, 10, 7, 7, 6, 3, 0, 8, 4, 1, 4, 3, 7, 4, 2, 4, 3, 1, 0, 0, 2, 2, 2, 1, 0)\n    val bronze = Seq(9, 10, 5, 12, 9, 5, 2, 1, 5, 7, 1, 2, 2, 6, 2, 4, 3, 1, 2, 1, 0, 6, 2, 1, 0, 1)\n\n    val da1 =  createDF(spark, names1, countries, gold,silver,bronze)\n    da1.show(3)\n","user":"sb","dateUpdated":"2018-08-29T23:52:01+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"names1: Seq[String] = List(countries, gold, silver, bronze)\ncountries: Seq[String] = List(Russian Fed., Norway, Canada, United States, Netherlands, Germany, Switzerland, Belarus, Austria, France, Poland, China, Korea, Sweden, Czech Republic, Slovenia, Japan, Finland, Great Britain, Ukraine, Slovakia, Italy, Latvia, Australia, Croatia, Kazakhstan)\ngold: Seq[Int] = List(13, 11, 10, 9, 8, 8, 6, 5, 4, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0)\nsilver: Seq[Int] = List(11, 5, 10, 7, 7, 6, 3, 0, 8, 4, 1, 4, 3, 7, 4, 2, 4, 3, 1, 0, 0, 2, 2, 2, 1, 0)\nbronze: Seq[Int] = List(9, 10, 5, 12, 9, 5, 2, 1, 5, 7, 1, 2, 2, 6, 2, 4, 3, 1, 2, 1, 0, 6, 2, 1, 0, 1)\nda1: org.apache.spark.sql.DataFrame = [countries: string, gold: int ... 2 more fields]\n+------------+----+------+------+\n|   countries|gold|silver|bronze|\n+------------+----+------+------+\n|Russian Fed.|  13|    11|     9|\n|      Norway|  11|     5|    10|\n|      Canada|  10|    10|     5|\n+------------+----+------+------+\nonly showing top 3 rows\n\n"}]},"apps":[],"jobName":"paragraph_1535579498815_-681816008","id":"20180829-235138_739776885","dateCreated":"2018-08-29T23:51:38+0200","dateStarted":"2018-08-29T23:52:01+0200","dateFinished":"2018-08-29T23:52:04+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1282"},{"user":"sb","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1535579521056_893543559","id":"20180829-235201_1341810134","dateCreated":"2018-08-29T23:52:01+0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:1283"}],"name":"datascience/data frame","id":"2DNPZ2ANY","angularObjects":{"2CHS8UYQQ:shared_process":[],"2C8A4SZ9T_livy2:shared_process":[],"2CK8A9MEG:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2CKAY1A8Y:shared_process":[],"2CKEKWY8Z:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}