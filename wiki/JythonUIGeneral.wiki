#This page describes general idea behind MVP JythonUI framework

= Introduction =

The purpose is to create convenient implementation of MVP (Model/View/Presenter) http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter framework.
 * View. XML files defining content of the page (window, dialog). It provides default layout (simplistic although functional) and allows also defining more customized view (HTML panel layout).
 * Model. Framework written in GWT/Java (client side) and Server/Java. Takes data from the Presenter and display it using XML Views. Also picks up events from the View, gets current data and raises proper method in the Presenter.
 * Presenter. Resides at the server side. Acts as an interface between background repository (for instance database) and UI. Provides action for View (user) events and implements all business logic. Provides also response to the user event (data and actions).

= Development =

Development requires defining XML file (user interface contents and buttons) and Presenter implementation written in Jython. Jython is interpreted language and does not require recompiling. This way way the development of View and Presenter can be done without typical J2EE/Java development. On the other hand Jython the advantage of Jython is easy access to Java libraries so all richness of Java is available for Jython development.
Framework acts as a "middleware" between View and Presenter. Creates user interface using View (XML files) and fills it with the date taken from the presenter. After user action (for instance clicking the button) sends all data to the Presenter and raises proper method at the server side. 
Current version support Jython only. It is planned in the future to allow also client customization (View enahancement by means of JavaScript code) and additional language for the server side (Presenter). For instances: C Python (by means of JNI) and Java itself.

= Details =

== Actions ==

=== Action list ===

|| Action name || Parameter || Parameter 1 || Parameter 2 || Description ||
|| JUP_DIALOG || Name of the XML file with the dialog  || || || Displays dialog as popup, modal dialog ||
|| JMAIN_DIALOG || Name of the XML file with the dialog || || || Displays dialog in main window, removes previous main dialog ||
|| JOK_MESSAGE || Window content || Window title || || Displays simple OK message ||
|| JERROR_MESSAGE || Window content || Window title || || Displays simple OK message but window is decorated as "error" message ||
|| JYESNO_MESSAGE || Window content || Window title || Action identifier. Action receives information is user action was yes/no. Boolean variable JYESANSWER holds true/false value || Displays Yes/No message windows ||
|| JCLOSE_DIALOG || || || || Opposite to JUP_DIALOG. Closes modal dialog and returns to upper dialog ||

=== Action in Jython code ===

{{{
  var[{Action name}] = True
  var['actionparam'] = {param value}
  var['actionparam1'] = {param1 value}  
  var['actionparam2'] = {param2 value}
}}}

Example:
{{{
  var['JOK_MESSSAGE'] = True
  var['actionparam'] = 'Hello message'
  var['actionparam1'] = 'Hello title'
}}}

=== Action in XML definition ===

<code language="xml">
  <button id={id} displayname={display name}  actiontype={action} actionparam={value of param}  actionparam1={value of param1} actionparam2={value of param2} />
</code>

Example: Display new main windows after clicking button "list"

<code language="xml">
  <button id="list" displayname="List" actiontype="JMAIN_DIALOG" actionparam="list.xml"/>
</code>

Jython equivalence:
{{{
  var['JMAIN_DIALOG'] = True
  var['actionparam'] = 'list.xml'
}}}

=== Sample related to JYESNO_MESSAGE ==

XML file:
<code language="xml">
<dialog>
...
 <buttons>
 <button id="clearPersons" displayname="Clear all" actiontype="JYESNO_MESSAGE" actionparam="Do you really want to remove all persons now ?" actionparam1="Warning before removing" actionparam2="clearpersons" />
 </buttons>
...
<dialog>
</code>

Jython code:
<code language="python">

def dialogaction(action,var) :
    
  if action == "clearpersons" :
     yes = var['JYESANSWER']
     if yes : do_seomethin_if_yes_answer 
     else : do_somenthing_if_no_answer

</code>