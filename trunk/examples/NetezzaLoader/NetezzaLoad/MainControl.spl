/*
 * Copyright 2013 stanislawbartkowski@gmail.com 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 * http://www.apache.org/licenses/LICENSE-2.0 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */
namespace NetezzaLoad ;

use com.ibm.streams.db::ODBCAppend ;
use com.ibm.streams.db.netezza::NetezzaPrepareLoad ;
use com.ibm.streams.db.netezza::NetezzaLoad ;

/**
 * Operator description
 * 1: Produces a flow of tuples in shape of : random, string
 * 2: Test, print console
 * 3: Gate, latches, stop tuples until connection credentials are sent
 * 4: Send credentials to NetezzaLoad and ODBCAppend, unclock the gate
 * 5: ODBCAppend, load data to Netezza via ODBC 
 * 6: NetezzaPrepareLoad, prerequisite for NetezzaLoad
 * 7: NetezzaLoad, load data to Netezza
 */

composite MainControl
{
	graph
	    // 1
		(stream<int64 numb, rstring name> ToGate) as Beacon_1 = Beacon()
		{
			logic
				state : list<rstring> rList = [ 'Hello world', 'I\'m here', "Hello Kitty",
					"Good bye, cruel world" ] ;
			param
				iterations : 10 ;
			output
				ToGate : numb =(int64)(random() * 32000.0), name = rList
					[(int32)(random() *(float64) size(rList)) ] ;
		}

        // 2
		() as Custom_2 = Custom(FlowOfData as S)
		{
		//			logic
		//				onTuple FlowOfData : println(S) ;

		}
		
		// 3
		stream<S> FlowOfData = Switch(ToGate as S ;Control) {
		  param status : true;
		}

        // 4
		(stream<map<rstring, rstring> m> ControlPort; stream<boolean open> Control) = Custom()
		{
			logic
				onProcess :
				{				
					submit({ m = { "connection.password" : "secret" } }, ControlPort) ;
					submit( { open = true}, Control);
				}
		}

        // 5
		() as ToODBC = ODBCAppend(FlowOfData ; ControlPort)
		{
			logic
				onTuple ControlPort : println(ControlPort) ;
				onTuple FlowOfData : println(FlowOfData) ;
			param
				connection : "warehouse" ;
				access : "towarehouse" ;
				connectionPolicy : Deferred ;
				connectionPassword : "bad password";
		}

        // 6
		(stream<rstring buf> NetezzaPrepareLoad_4_out0) as NetezzaPrepareLoad_4 =
			NetezzaPrepareLoad(FlowOfData)
		{
			param
				access : "netezzaLoad" ;
		}

		() as Custom_5 = Custom(NetezzaPrepareLoad_4_out0 as S)
		{
		//			logic
		//				onTuple NetezzaPrepareLoad_4_out0 : println(S) ;

		}

        // 7
		stream<rstring errorString, int32 sqlcode, rstring sqlmessage,
			rstring sqlstate> NetezzaLoad_6 = NetezzaLoad(NetezzaPrepareLoad_4_out0; ControlPort)
		{
			param
				connection : "warehouse" ;
				access : "netezzaLoad" ;
				LogDir : "/tmp/myDirectory";
				connectionPassword : "bad password";
				connectionPolicy : Deferred;
		}

		() as Custom_7 = Custom(NetezzaLoad_6 as S)
		{
			logic
				onTuple S : println(S) ;
		}
}

