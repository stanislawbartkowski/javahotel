type MetricRating = tuple<int32 excelent, int32 rating0> ;

composite Main
{
	graph
		(stream<rstring name, uint32 rating> Beacon_1_out0) as Beacon_1 = Beacon()
		{
			logic
				state : list<rstring> nameList = [ "Hello Kitty", "Good by, cruel world",
					"Nice to see you" ] ;
			param
				period : 0.2 ;
			output
				Beacon_1_out0 : name = nameList [(uint32)(random() * 3.0) ],
					rating =(uint32)(random() * 5.0) ;
		}

		(stream<S> Functor_3_out0) as Functor_3 = Functor(Split_6_out1 as S)
		{
			output
				Functor_3_out0 : rating = rating * 2u ;
		}

		(stream<S> Split_6_out0 ; stream<S> Split_6_out1) as Split_6 =
			Split(Beacon_1_out0 as S)
		{
			param
				index : rating == 0u ? 0 : 1 ;
		}

		() as FileSink_4 = FileSink(Split_6_out0)
		{
			param
				file : "rating0.csv" ;
				format : csv ;
		}

		() as FileSink_5 = FileSink(Functor_3_out0)
		{
			param
				file : "ratingexcellent.csv" ;
				format : csv ;
		}

		() as Custom_6 = Custom(Functor_3_out0)
		{
			logic
				onTuple Functor_3_out0 : println(Functor_3_out0) ;
		}

		stream<int64 excelent, int64 rating0> MetricCollection = Custom(Split_6_out0
			as R0 ; Split_6_out1 as E)
		{
			logic
				state :
				{
					mutable int64 rating0 = 0l ;
					mutable int64 excelent = 0l ;
				}

				onTuple E :
				{
					excelent = excelent + 1l ;
					submit({ excelent = excelent, rating0 = rating0 }, MetricCollection) ;
				}

				onTuple R0 :
				{
					rating0 = rating0 + 1l ;
					submit({ excelent = excelent, rating0 = rating0 }, MetricCollection) ;
				}

		}

		() as MetricsSink_7 = MetricsSink(MetricCollection)
		{
			param
				names : "excelent", "rating0" ;
				metrics : excelent, rating0 ;
		}

}



